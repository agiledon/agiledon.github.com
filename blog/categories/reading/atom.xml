<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reading | 简单文本]]></title>
  <link href="http://agiledon.github.com/blog/categories/reading/atom.xml" rel="self"/>
  <link href="http://agiledon.github.com/"/>
  <updated>2014-05-08T09:57:28+08:00</updated>
  <id>http://agiledon.github.com/</id>
  <author>
    <name><![CDATA[张逸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[阅读的力量]]></title>
    <link href="http://agiledon.github.com/blog/2014/03/04/the-strength-of-reading/"/>
    <updated>2014-03-04T20:47:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2014/03/04/the-strength-of-reading</id>
    <content type="html"><![CDATA[<p>{% img center /images/2014/steiner.jpg %}</p>

<p>阅读，以灵魂融合的方式阅读，或许会战栗，恐惧，喜悦，哭泣，甚至紧张，却可以让你成为阅读的人存在，你既是独立的，又陷入作品中成为你臆想和理解的另一个人。这种阅读，使得你存在。</p>

<p>乔治.斯坦纳(George Steiner）在《语言与沉默(Language And Silence)》的第一篇《人文素养》中如是评价阅读：</p>

<blockquote><p>那么，请尽可能地与文学同道。一个人读了《伊利亚特》第十四卷（普里阿摩斯夜会阿基琉斯），读了阿廖沙.卡拉玛佐夫跪向星空那一幕，读了《蒙田随笔》的第二十章，读了哈姆雷特对这章的引用，如果他的人生没有改变，他对自己生命的领悟没有改变，他没有用一点点彻底不同的方式大量他行走其中的屋子，打量那些敲门的人，那么，他虽然是用肉眼在阅读，但他的心眼却是盲视。读了《安娜.卡列尼娜》或普鲁斯特的人，在心灵的深处，能不体验到新的虚弱或需求？</p>

<p>……读了卡夫卡的《变形记》，却依然能够无畏地面对镜中的自己，这样的读者，也许从字面上说，能够识文断字，但在最根本的意义上，不过是白丁而已。</p></blockquote>

<p>阅读确乎常常能打动我，当然，这也要取决于我面对的是何种作品。我的心灵并不坚强，甚而耽于安逸，每当阅读到那种让灵魂战栗或者恐慌的时候，我或许会想着逃离。我阅读卡夫卡《变形记》的感受如此，我几乎要被那种昏暗、恐慌、无助给击倒了，甚至有一种被人扼住喉咙要窒息的感觉。我在代入。我在想象当我在次日清晨突然发现自己变成一种爬虫，会是怎么样？又或者发现自己的爱人变成了丑陋的爬虫，蠕动着可以看到爬动的粘液，我会如何反应？答案是毫无疑问的步入心灵的昏暗层面，我既不能无动于衷，也不能泰然自若。在那一刻，是人生崩溃的感觉。</p>

<p>通常而言，好的小说会让人不忍卒读，而我在阅读《变形记》时，我有一种甩开书本的冲动。我害怕去看结果，甚至害怕想象这种场景；然而，这场景却像有了生命，拥有着执念一般地硬要挤入我的脑袋中来。坦白说，我害怕看到自己隐藏的丑恶，害怕撕开肌肤，入眼一片血淋淋！</p>

<p>我在阅读《蒙田随笔》时，就成为第三者旁观了。那些睿智充满哲思的话语，几乎无法打动我，我就像看着一个智慧老者无语的絮叨，我做出尊敬而认真倾听的样子，心里却在感叹：他，已经不是这个时代了。</p>

<p>大多数时候，当我阅读完一部伟大的作品，尤其是小说，会有一种空虚感。好像自己曾经步入过小说中虚构的世界。那个世界产生的重力如此之大，压着我直不起身；直到走出，突然感觉自己已经适应了那种重量，脚步反而变得虚浮起来。重要的是我的内心会产生寂寞感。当我阅读完《不能承受的生命之轻》、《不朽》时，如是；阅读完《树上的男爵》，也如是。</p>

<p>还有一种感觉就是解脱。小说描述主人公的种种形状，一定是被某种不可知的力量所牵引，规约。这种力量或许可以称之为命运，也可能是自己的性格，又或者是当时那个大时代的集体力量。巧合的是，这种作品多数是以第一人称描述。例如在读完《麦田的守望者》，《洛丽塔》，我几乎要长吁一口气，产生一种如释重负的轻松。</p>

<p>这样的阅读中的我，是否斯坦纳笔下的“白丁”呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[摘录《树上的男爵》]]></title>
    <link href="http://agiledon.github.com/blog/2014/01/11/excerpt-from-barone-rampante/"/>
    <updated>2014-01-11T19:32:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2014/01/11/excerpt-from-barone-rampante</id>
    <content type="html"><![CDATA[<p>{% img center /images/2014/barone_rampante.jpeg %}</p>

<p>卡尔维诺《树上的男爵》书写了这么一段难以言说、无可名状的美丽的段落，让我惊叹，甚至是那种心悸的喜悦。这样的笔下的景色，仿佛让我身临其境，又似乎另有一种魔力，如夕阳之下各色景观都涂上了一层金色的光亮。这一段落并非那种精致的美，但却自有一种纤细与磅礴，很奇怪的矛盾杂糅，然后蹦出一种奇异的美。</p>

<blockquote><p>他的天地已经变了，这是一个由架在空中的细长而弯曲的桥，由粗糙树皮上的结节、瘤子和皱褶，由透过或疏或密的树叶挡起的帷幕而变幻着深浅的绿色阳光组成的世界，微风一吹，树叶的柄就抖动不已，而当树干摇摆时整棵树的叶子就像一方纱巾飘动起来。而我们的世界呢，是平贴在地面上的，我们看到的是比例失调的形象，我们当然不理解他在那上面的感受。夜里他倾听着树木如何用它的细胞在树干里记下代表岁月的年轮，树霉如何在北风中扩大斑点，在窝里熟睡的小鸟瑟缩着将脑袋钻进最暖和的翅膀下的羽毛里，毛毛虫蠕动，伯劳鸟腹中的蛋孕育成功。有的时候，原野静悄悄，耳膛内只有细微的响动，一声粗号，一声尖叫，一阵野草迅疾瑟瑟声，一阵流水淙淙响，一阵踏在泥土和石子上的蹄声，而蝉鸣声高出一切之上。响声一个接一个消失，听觉不断辨别出新的声音，就像那拆着一团毛线的手指，感觉到每根毛线变得越来越细，细得几乎感触不到了。同时青蛙一直在鸣唱，作为一种背景并不影响其它声音的传播，如同太阳光不因星星的不断闪烁而起变化。相反，每当风吹起或吹过，每一种声音都会起变化并成为新的声音，留在耳膛内最深处的只有隐隐约约的呼啸声或低吟声，那是大海。</p></blockquote>

<p>要多么细致的观察，多么敏感的心灵，与大自然的脉搏一起跳动，放开身体的所有触觉、嗅觉与视觉，才能从灵魂中涌现出这样的文字，最后再借助一只魔笔润色，天然地凸显出来，就好像它自天地诞生以来一直就存在，只是从未有人发现，偶然的，被在天地之间嬉戏的卡尔维诺发现了。是的，是被发现了，而不是创作出来了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《被禁锢的头脑》]]></title>
    <link href="http://agiledon.github.com/blog/2014/01/10/reading-the-captive-mind/"/>
    <updated>2014-01-10T22:24:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2014/01/10/reading-the-captive-mind</id>
    <content type="html"><![CDATA[<p>{% img center /images/2014/captivemind.jpg %}
米沃什在《被禁锢的头脑》中，描述了战时东欧的白色恐怖：</p>

<blockquote><p>此时带着套马索的骑马者就会出现。那就是‘囚车’，即停在街角，用帆布遮盖着的大卡车。行人根本预见不到那里会有危险，当他们路过那个街角时，会突然感觉有一支枪顶住他。它也许会被关进集中营，或者会被推到墙下，用胶布封上嘴巴以防止他喊出反对占领国的口号，然后就被枪毙。这一切都令城市居民心惊胆战，迫使他们俯首帖耳。为了避免这种不幸，最好的办法就是足不出户。但是作为一家之主的父亲必须外出挣钱，弄点供养他的妻儿老小的面包和菜汤。每到晚上，家里人就开始心绪不宁，担心父亲是否还回得来。这种情况已经持续多年，所以人们渐渐觉得他们居住的这座城市简直就是危机四伏的原始森林，20世纪人的命运，与那些每天跟毒蛇猛兽作生死搏斗的穴居人的命运没什么两样。</p></blockquote>

<p>没有经历过这种生活的人阅读这样的文字，仍然可以体会那种惶惶的恐怖，这种恐慌如慢性毒药一般啃啮人的心灵。与其这般在极大恐惧中担惊受怕，过着如丧家犬的生活，不知什么时候会抛尸街头或者入牢笼中受非人的折磨，真还不如扛起枪冲出战壕面对冷酷而喧嚣的枪林弹火呢。</p>

<!--more-->


<p>第三章《凯特曼——伪装》描述的情景，不正是文革中诸多知识分子奉行的——美学凯特曼。同样的政治高压与知识钳制发生在同样的社会主义国家，这岂是偶然？思想正确的真理“唯一”论，已经说明了这种真理的不可信。正如奥威尔在《一九八四》借温斯顿之口说出的“所谓自由就是可以说二加二等于四的自由。承认这一点，其他一切就迎刃而解。”在真理唯一性的指导下，我们没有自由反驳老大哥的言论了，即使最蠢的傻瓜都知道这种言论的谬误。</p>

<p>这样的社会主义，何异于“指鹿为马”的赵高宣泄权利的恶时代呢？阅读《被禁锢的头脑》，感觉就是《一九八四》的现实版。</p>

<p>在第八章的219页，米沃什写道：“他们的研究对象是不同群体的居民。有产者阶级最不重要，他们由于工厂、矿山收归国有和农业改革而被剥夺了财产，不是供研究的主要对象。”</p>

<p>“小资产阶级——小商人和手工业工作者不应受到忽略，他们是深深扎根于民众的一股强大力量。”</p>

<p>然后书中以调侃方式提到什么叫“资本主义萌芽”，什么叫”资本主义复辟“，什么又叫”投机倒把者“，真是入木三分啊！</p>

<p>书中描绘对农民的斗争策略，可谓摸准了人性，各种隐藏的恶与自私在显微镜下纤毫毕现，他们就好像发现了病毒，却并不思考如何寻找疫苗，反而将这种病毒扩大，扩散，以期求得对他们更为广泛的利益。——“于是把农民分为‘贫农’、‘中农’、‘富农’，因为，只有利用他们之间彼此的敌对心理，打破农村的团结，才能达到目的。”——真正是四两拨千斤的高妙手段。</p>

<p>对付工人的手段仍然利用了人性，与对付农民的手段如出一辙：“总的来说，提出‘工人团结’的口号并不意味着可以放纵某一工厂工人的团结，因为这种团结会因选拔劳动‘突击手’而被瓦解——劳动‘突击手’就是超额完成任务者，这就会让其他工人感到有压力或力不从心。有两种手段可以影响工人们的思想：一方面激起他们的雄心壮志，一方面要求他们承受党组织所施加的压力。”</p>

<p>米沃什的结论是：一切都导致对人的头脑的统治。于是党的宣传手段如宗教信仰一般，以某种集体仪式，达成一种心理催眠的信仰氛围，即使心有不信者，也会被慢慢潜移默化了。于是——</p>

<blockquote><p>这个集合体是由个体组成的，有些人虽对这一切心怀疑虑，还是说了预先规定该说的话，唱了预先规定该唱的歌；这种行为就打造出了一种群体氛围，最后自己也被这种氛围所感染。俱乐部的影响尽管带有理性的表征，但也属于群体魔术现象之列。</p></blockquote>

<p>米沃什提到了“知识庸俗化”带来的影响，可谓猛于虎矣。</p>

<blockquote><p>例如，简单化和庸俗化的达尔文物种起源和物竞天择理论，都已不同于达尔文以及与他争论的学者们的理论。它已被改造成社会学理论的重要部分，带有某种感情色彩了。20世纪的领袖们，例如希特勒，其知识仅仅源于科普小册子，这就可以解释他们头脑中不可思议的知识混乱。<strong>庸俗化知识的特点是：它让人感觉一切都是明明白白的，一切都是可以解释清楚的；</strong>它也令人想起在深渊之上架设吊桥的方法，沿着吊桥可以大胆地往前走，同时自欺欺人地认为：脚下没有万丈深渊，同时要记住，眼睛千万不能往深渊看——但遗憾的是，这一切都不能改变现实中存在万丈深渊的事实。</p>

<p>由苏联窜改的辩证唯物主义，不是别的，正是知识的双倍庸俗化。……辩证法的出发点是科学的——运用人文科学方面，主要在于根据一时的需要，将人文科学任意改造为它想建立的学说。——人类历史的数世纪，充满了成千上万的复杂事件，结果只用几个术语就高度概括了。<strong>毫无疑问，将过去和当代的历史作为阶级斗争的表现来进行分析，比将历史展示为那些王公贵族和国王彼此之间的私下争斗胡闹更接近真理。正是因为这种分析更接近真理，它也就更加危险：这种分析给人一种完满知识的错误，似乎能对每个问题作出回答，然而这种回答实际上只是在转着圈儿地重复几种套话，什么也解释不了，同时还让人得到表面的满足。</strong>对此还得附加一点，即借助唯物主义（例如”物质不灭“的理论）将自然科学与人文科学结合起来，而我们就会看到，当斯大林出现在我们这个星球自有生命以来的历史顶点之时，整个圆就奇妙而又合逻辑地画成了。</p></blockquote>

<p>如下这一段达到了反讽的巅峰，却又如此合情合理：</p>

<blockquote><p>有一种昆虫，会将自己的毒刺戳进其他科属的毛毛虫体内，并注入毒素，那些体内被注入了毒素的毛毛虫虽然还活着却已经瘫痪不能动了。这些昆虫——投毒者，就在那些毛毛虫体内产卵，于是毛毛虫的身体就变成了这些昆虫幼虫的食物储藏室。同样的，在人民民主国家，人们的头脑里也被注入了麻醉剂——那就是辩证唯物主义，虽说马克思和恩格斯从未设想过他们的学说会被如此利用。当人们的大脑被麻醉了以后，斯大林主义的解释就在他们的大脑中产卵：“既然你已经是个马克思主义者，”他们对这位患者说，“那你就必须是斯大林主义者；因为没有斯大林主义，就没有马克思主义。</p></blockquote>

<p>哈，没有斯大林主义，就没有马克思主义。这是辩证唯物主义存在的意义。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于《恰如其分的软件架构》]]></title>
    <link href="http://agiledon.github.com/blog/2013/08/29/about-just-enough-software-architecuture/"/>
    <updated>2013-08-29T10:39:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2013/08/29/about-just-enough-software-architecuture</id>
    <content type="html"><![CDATA[<p>{% img center /images/2013/justenough_cn.jpg %}
华中科技大学出版社的徐定翔问我意见，了解我对Just Enough Software Architecture这本书的观感，看是否值得引进。时间是在2010年。从一开始，我就被书名中的Just Enough理念所吸引。它让我想起宋玉的东家姑娘，“增之一分则太长，减之一分则太短”那种不可言说的美丽。我在心里说，架构设计就需要这样。我当时并没有看到本书，只是到Amazon上找到了几篇英文原版样章。犹记得我在读到第一章介绍的RackSpace案例时那种兴奋之情。于是，我迫切地向徐定翔强烈推荐引进这本书，而我则毛遂自荐，希望能作为本书的译者。之后，我在InfoQ上看到对本书的《<a href="http://www.infoq.com/cn/articles/fairbanks-jesa">访谈和书摘</a>》，进一步加强了我翻译本书的信念。于是，出版社开始与作者Fairbanks联系，然而从此音讯如石沉大海。时针指向2011年，我对于本书是否被引进，是否由我翻译，一切未知。我觉得我可能错过了它，思之仍觉怅然。谁知到了九月，消息突然确定，而徐大编辑就不容分说地直接把原书给我寄来了。</p>

<p>拿到沉甸甸的书，第一面就为本书的装帧而惊喜。心里想，我这一辈子若能写出这样一本书，绝对值得生命走过的这一遭了。我并没有迫不及待地开始翻译，这就好似遇到珍馐美味，需得先赏其色，闻其香，然后再品其味。我每天抱着这本书饶有兴味地开始阅读之旅。阅读之旅确乎如行山阴道，沿途之美，目不暇接；可一想到翻译，这种美景就成了一种折磨，因为我害怕辜负这一美景。翻译之初我就举步维艰，那些词语放在那里，我却无法解开“封印”将它们取出来，即使取出来，却又找不到存放的合适位置。一些翻译隐隐约约浮现着，当我竭力去揭开这些词语的真面目时，无论如何用力，总也不能够着。翻译就好像那些年我们一起追过的女孩——追不到，痛苦；追到了，销魂。翻译进度像蜗牛一样的爬着，我终于决定求助了。辗转寻找了好多朋友，都以各种理由拒绝或者放弃了。翻译讲解软件架构的书，确乎不是一件轻松的事儿。那个时候，我的Buddy肖鹏正从翻译《面向模式的软件架构》第五卷的泥潭中爬了出来。每一提及他的这段翻译经历，脸上就会浮现出不堪回首的表情，如看了恐怖片。终于，事情得到转机，最开始是倪健的雪中送炭，再有高翌翔的锦上添花，随着我们这个三人组的建立，翻译才算开始走向正规，我才有了交稿的信心。</p>

<p>自从开始翻译这本书后，我与人谈架构，动辄就会提及“Just Enough，恰如其分”。我像祥林嫂一般地推介着Fairbanks提出的风险驱动模型，并认真地实践着这一模型。我开始对演进的架构有了更深入的理解。我写了《<a href="http://agiledon.github.io/blog/2011/10/10/design-just-enough-architecture/">设计恰如其分的架构</a>》这篇博客来详细阐述我对演进式架构的理解。在2011年我参加的技术会议上，我也反复讲解了如何遵循简单之美的原则，运用风险驱动模型设计恰如其分的架构。2012年，在我参加的一个项目中需要针对遗留系统进行技术栈迁移。我撰写了文章《<a href="http://www.infoq.com/cn/articles/legacy-system-migration">遗留系统的技术栈迁移</a>》，提到了“风险驱动模型”，并在2013年的Scrum Gathering会议上分享了我的一些想法。当然，这个模型并不是锤子，更不是银弹。它更近似于质量属性驱动的架构设计，我们要满足的质量属性，可能就是我们在做架构时需要面对的风险；而在Roy Fielding的那篇关于REST的著名论文中，也提到了对约束的识别，并演示了如何从一个空约束，通过逐步添加约束演化为REST风格的架构。从某种程度上，架构的约束可能是一种风险，也可能成为设计的驱动力。</p>

<p>前几天，我参加Agile China 2013，与我新认识的一位朋友范钢聊到了关于架构重构的问题。事实上，面向对象软件开发到现在，已有十余年之久；各种经验、模式与原则甚嚣尘上并得到较好的推广。然而新的方法、新的语言乃至新的思想仍然层出不穷，尤其是在互联网开发、大数据处理以及移动开发的冲击下，传统软件开发似乎已经开始走向末路。“只见新人笑，不见旧人哭”！？？是，也不是。实际上，在传统的企业开发领域，各种大型系统仍然像一艘庞大如巨型海兽一般的船舰在海面缓缓行驶，它或许就是沉没之前的泰坦尼克，一切还都安然无恙，你甚至可以听到船头甲板传来的悠扬的小提琴声；然而，冰川就在远处出没，船长还未察觉。我们该怎么办？这样的巨型船舰，自然不可能如艨艟快艇那般的敏捷，即使是360度的转身，也可以玩得如此漂亮、优雅。这些大型的企业级软件系统已经走过了漫长的历程，它们如此巨大以至于我们只能看到它的一角，它们的零部件如此复杂以至于没有人能够彻底弄懂。我们必须认识到，这些系统是最有权力的系统，它们很有可能掌握了人类生活的根本命脉——金融管理、股市交易、生命健康、医疗管理、机械制造、国防安全、航空、航天……它们就像政治界、金融界的那些巨头，要是患了病咳嗽两声，也许世界都要抖一抖。它们可以轻易改变吗？不能！然而若是不寻求改变，这些系统会宿命地走向衰亡。若我们无法承受重写的成本，唯一的办法或许就是架构的重构。我们必须清晰地认识到这一点。而我认为，风险驱动模型恰恰可以作为架构重构的指导原则。在进行重构之前，我们需要充分评估重构的价值，回答“为什么我们需要重构”的问题；然后去识别风险。在开始重构之前，我们需要尽可能做到万无一失。风险自然是不可避免的，但如果我们能事先识别出这些风险，就能有的放矢地选择正确的技术。风险驱动模型的第三步，则是评估风险是否得到有效缓解。不要轻视这一步！重构往往意味着还债。可是，我们该用什么来说服管理者们付出成本去做一些看似没有产生直接利益的任务呢？答案就是用数据来说话，通过比较重构前后的系统健康指标，可以加重说服老板的砝码。当然，毫无疑问，这个过程一定是迭代的。</p>

<p>我想，通过这次交谈，我进一步找到了“风险驱动模型”适用的场景。而这正是我翻译并推荐本书的根本意义。本书可以在<a href="http://product.dangdang.com/product.aspx?product_id=23320387">当当网</a>购买。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks读书雷达-方法学篇]]></title>
    <link href="http://agiledon.github.com/blog/2013/08/06/methodologies-of-reading-radar/"/>
    <updated>2013-08-06T10:41:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2013/08/06/methodologies-of-reading-radar</id>
    <content type="html"><![CDATA[<p>{% img center /images/2013/readingradar03.png %}</p>

<p>方法学（Methodology）看似与开发技能无关，常为程序员忽略。忽略意味着未曾察觉，却不等于它的无关紧要。我们每时每刻呼吸的空气同样会被我们忽略，但空气不重要么？不要等到我们开始戴上口罩，每日关心PM 2.5指数时，方才察觉原来空气的质量已经积重难返了。在我们的读书雷达中，方法学象限囊括的书籍多与开发过程相关。如果说开发技能是程序员修炼过程中必须加强的显式的力，则开发过程的这些思想与实践，就是隐藏的推手。你若不动，它会推你前行，然而缓慢；若你后退，则推动的阻力就大，暗流汹涌。只有自愿向前，这种助力才能如鱼得水，使你能够优游地前行。</p>

<p>软件开发说通了，不是技术问题，而是人的问题。</p>

<p>由于我们所处的领域，敏捷方法才是我们的擅长，因而在这个象限中，我们推荐的书籍主要与敏捷相关。首先推荐的是一本祖师级的经典大作，Kent Beck的Extreme Programming Explained《<a href="http://book.douban.com/subject/1099376/">解析极限编程</a>》。一切关于极限编程的思想、原则与实践，都能追本溯源到本书，寻找到这些内容的出处。如果你从未曾了解或接触过XP，通过本书，可以给你最正确的引导；若你已经在项目中运用了XP，却又心存疑虑，阅读本书一定能为你答疑解惑。</p>

<p>相较于《解析极限编程》更偏重理论，Henrik Kniberg的著作Scrum and XP from the Trenches《<a href="http://book.douban.com/subject/5501718/">硝烟中的Scrum和XP</a>》会带给你不同的感受。我们喜欢它的短小，简单，实用，书的气质分外地符合敏捷的精神。该书是Henrik Kniberg真实项目经验的提炼，讲述了成功敏捷团队的工作过程，没有理论、没有引用、没有脚注、没有废话。它可以作为基础实践的入门指南，帮助团队正确实施Scrum与XP——但不能模仿。你需要了解自己所处的环境，进而对具体实践做出取舍，创造出属于自己的过程。</p>

<p>如今，精益思想已经被许多不同的行业所广泛采用，该思想在软件行业的影响尤为显著。现代化的软件开发思想和实践方法，早就开始从精益思想里学习和借鉴，包括迭代开发，质量内建，一人多技，一岗多能，全功能团队，看板管理，持续改善等等。精益思想背后的想法可以追溯到上个世纪40年代后期，丰田公司的一群工程师发现了在连续流动中进行少量生产的方法，这种方法可以像传统的大量生产者批量生产大量产品的方法一样有效率。对于初次接触精益思想的读者来说，这种"少量生产和批量生产一样有效率"的思想，未免有些反直觉和难以理解，因为我们从小接触到的观念就是”只有大批量生产才是有效率的“。Freddy Balle等人的著作The Golden Mine《<a href="http://book.douban.com/subject/1852682/">金矿</a>》就是为初次接触精益思想的读者准备的。本书采用小说的形式，描述了一家濒临破产的企业如何采用精益的方式，扭亏为盈，让人读起来非常轻松有趣。</p>

<!--more-->


<p>在我们推荐的初学读物中，基本上覆盖了XP、Scrum与精益等主流的敏捷软件开发方法与思想。但是，我们还单独挑出了Mike Cohn的著作User Stories Applied《<a href="http://book.douban.com/subject/4743056/">用户故事与敏捷方法</a>》。因为——需求的重要性无论怎么强调都不为过，只有真正理解了用户需求，才能谈得上软件开发的成功。软件的需求说明不一定要是冷冰冰的，也未必需要庞大复杂的方法理论。用户故事对需求的描述更为柔和，预留了讨论和想象的空间，又能借助此作为项目评估的依据，需求分析和确认的基础。本书是描述用户故事的经典之作，几乎涵盖了编写用户故事的方方面面，同时又结合了敏捷开发思想的精髓，以加深你对敏捷开发的理解。</p>

<p>若要更上一层楼，我们还需要进一步了解更多的实践方法，当然，也包括理论的升华。许多方法大都源于实践，然而若无更高抽象层次的思想体系，则方法仅能作用于一事一物，场景一变，就只能偃息旗鼓了。正如你看一花的开放与衰败，并不能知春来与秋逝；只有把握内在的自然运行规律，四季的变换才可以被知悉。因而就精益思想而言，我想，阅读《金矿》不过是让你有了登堂入室的资格，若要走得更深，吃得更透，更好的阅读选择还是James P. Womack等人的经典之作Lean Thinking《<a href="http://book.douban.com/subject/1424857/">精益思想</a>》。该书阐述了精益思想的五大基本原则，并阐明了一些用于所有行业，并能创造永久价值的简单而有效之原理。同时，为了更好地说明这些原理，并阐释该如何应用它们，给出了大量包括应用步骤和从大企业到小企业的应用实例。本书的视角非常的高远，它将精益思想传播到了产品生产的整个价值流，关注于精益企业的打造。这种精益思想的全局观，可以让我们跳出软件行业的狭窄领域，观察更加广阔的天地。</p>

<p>Paul Duvall等人的Continuous Integration《<a href="http://book.douban.com/subject/2580604/">持续集成</a>》和Jez Humble的《<a href="http://book.douban.com/subject/6862062/">持续交付</a>》，加上Martin Fowler的<a href="http://www.martinfowler.com/articles/continuousIntegration.html">Continuous Integration</a>，可以看做是软件构建的三部曲。你以为持续集成亦然达到了目标，可是距离交付又还差了最后一公里。然而，没有持续集成，所谓持续交付又成了一句空话。便宜的阅读方法是快速浏览Martin Fowler的这篇文章后，直接步入Jez Humble建造的持续交付殿堂。这个殿堂没有售票员拦着你查看你手持的行程票；但是，在跨入这扇门之前，先去敲开Paul那扇门，会让你的步伐走得更坦然。持续集成和持续交付到底有多重要？在我连续经历了具有持续集成与持续交付能力的项目后，要让我再回到以前的项目开发状态，我会以为自己被遣送到软件宇宙的太初，一片混沌。</p>

<p>我们的读书雷达面向程序员，可是我们仍然毫不犹豫地推荐了诸多与测试相关的著作。这一认识完全符合精益的“一人多技”原则。团队成员一起战斗，程序员对测试说：“我把后背交给你！”然后，义无反顾地冲上前去战斗。可你冲得越猛越快越发的犀利，后背的测试就越撑不住。换言之，你理解为你支撑后背的测试人员吗？当团队需要你的测试技能时，你能挺身而出吗？阅读Lisa Crispin的Agile Testing《<a href="http://product.china-pub.com/53665">敏捷软件测试</a>》，可以让你切换到测试视角，观察我们该如何在敏捷项目中执行测试行为以保障软件的质量。作者在测试领域浸淫了丰富的项目经验，因而能够完整全面地勾勒出敏捷测试的全景，且又能深入到测试的细节，可谓敏捷测试的集大成者。因此，Robert Martin推荐本书，认为它“实用、智慧、反对教条。本书意义重大，每一位软件专业人员都应该阅读”。</p>

<p>James A. Whittaker等撰写的著作<a href="http://book.douban.com/subject/7065508/">How Google Tests Software</a>揭秘了作为本世纪最成功的软件企业之一的Google，是如何应对和处理软件测试的复杂性的。Google通过对自身软件特征的定位，自我演化出一种非同寻常的测试文化。这种特立独行并非刻意为之，而是从工程实用性的角度量体裁衣。Google的测试开发工程师（SET）角色正是这种工程实用文化的凸显。Google的高级工程总监Patrick Copeland认为：“最好的办法是让测试人员有能力把测试作为产品的真实的功能写到代码库里，测试作为产品的一个功能应该和真实用户可以看到的其他功能一模一样。”这种测试工程文化未必能够照搬照学，但其中内涵的一些测试策略与原则，仍旧值得我们学习和借鉴。</p>

<p>如果是在5年或者8年之前，我们推荐阅读Matt Stephens与Doug Rosenberg的著作Extreme Programming Refactored《<a href="http://book.douban.com/subject/1400341/">重构极限编程</a>》，是希望读者能够冷静地思考极限编程，不为各种吹捧而着迷。然而，时至今日，那种膨胀以及夸大地吹捧已经烟消云散，使得我们多数人已经能够正确地对待敏捷方法，对待极限编程。那么，为何我们还要推荐本书？这是因为，我们希望转动一下极限编程的水晶球，观察它不同的棱面，即便是面对暮色折射出的幽暗光芒，同样有其诱人之处。反面地或者说批判地审视极限编程，并不会彻底的否定极限编程推崇的实践与原则，只是予我们以警示，要求我们结合具体场景因地制宜，因人而异地推行这些敏捷实践。本书只不过是完整地拉开了极限编程的帷幕，让我们不只看到了舞台上的精美表演，也看到了角落一隅可能存在的混乱与无序。</p>

<p>工程师其实并不擅长用文字去描述自己所思所想，因此何谈准确描述客户的需求？我们喜欢事实说话，数字说话，因为它不会撒谎，不会虚饰，因而不会误解。这正是Specification By Example《<a href="http://book.douban.com/subject/11611022/">实例化需求</a>》的出发点。该书是作者Gojko Adzic从大量工程项目得来的经验，基于大量的业内研究提炼出来的知识总结。这种实例化需求的方式既能清晰地表述需求，消除客户、需求分析师、开发人员与测试人员在沟通中可能产生的理解分歧；又极为融洽地支持开发人员进行有效地测试驱动，帮助测试人员条理清晰地完成对需求功能的验收和测试。实例化需求不仅仅是一种方法，更是一种对软件开发方法学的革命，我如此认为。</p>

<p>注：本文由张逸与刘龙军共同完成。</p>
]]></content>
  </entry>
  
</feed>
