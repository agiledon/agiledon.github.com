<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: DotNET | 逸言]]></title>
  <link href="http://agiledon.github.com/blog/tags/dotnet/atom.xml" rel="self"/>
  <link href="http://agiledon.github.com/"/>
  <updated>2014-09-25T13:07:50+08:00</updated>
  <id>http://agiledon.github.com/</id>
  <author>
    <name><![CDATA[张逸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用扩展方法实现重用]]></title>
    <link href="http://agiledon.github.com/blog/2013/06/16/reuse-with-extention-method/"/>
    <updated>2013-06-16T20:06:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2013/06/16/reuse-with-extention-method</id>
    <content type="html"><![CDATA[<p>我们已经有了一个IRepository接口，它提供了诸如BatchSave()，Insert()之类的方法。其中，BatchSave()方法接收一个由实体类组成的数组，从而完成对实体对象的批量存储。
{% img center /images/2013/06/IRepository.png %}</p>

<p>对于单个实体对象而言，我们当然也需要有相关的方法来完成存储。它与BatchSave()的区别仅在于它要接收的参数只是一个实体对象。事实上，我们可以调用IRepository接口本身提供的BatchSave()来实现Save()方法。Save()方法的实现对于所有实现了IRepository接口的类而言，完全是一样的。那么，我们该如何为IRepository接口增加一个Save()方法，同时又能避免代码做出太多修改？由于接口自身并不能提供实现，因此唯一可以容纳这个方法实现的就是实现了IRepository接口的类。一个办法是为所有这些实现类定义一个公共的抽象父类，并让它再实现IRepository接口，于是将Save()的实现放到这个抽象父类中，就可以使得所有子类共享Save()方法的实现了。可是，为了这个Save()方法的实现与重用，专门引入一个抽象父类，是否值得呢？除非在现有的Repository继承体系中，已经存在了这样的抽象父类，否则该类的引入会导致整个继承体系发生较大的变化。</p>

<p>在.NET中，我们可以巧妙地借助扩展方法来完成对Save()方法的重用，同时又能保证现有的继承体系不变。方法就是为IRepository接口提供扩展方法：
{% codeblock lang:csharp %}
public static class RepositoryExtensions {</p>

<pre><code>public static void Save&lt;T&gt;(this IRepository&lt;T&gt; repository, T entity) {
    repo.BatchSave(new[] {entity});
}
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post数据到服务端生成文件]]></title>
    <link href="http://agiledon.github.com/blog/2012/02/10/post-data-to-server-side-to-generate-file/"/>
    <updated>2012-02-10T11:27:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2012/02/10/post-data-to-server-side-to-generate-file</id>
    <content type="html"><![CDATA[<p>我们希望将客户端（ExtJS 4.0）浏览器中选择的记录post到服务端（ASP.NET MVC 3.0），然后在服务端将这些数据导出到CSV文件中，并传到客户端进行保存。最初，我们希望在客户端采用AJAX请求，将json数据post到服务端。例如：
{% codeblock lang:js %}
postSelectedItems: function(gridId, callback) {</p>

<pre><code>var me = this;
Ext.Ajax.request({
    method: 'POST',
    jsonData: Ext.encode(
        Ext.getCmp(gridId).getSelectedRecords().map(function (item){
            return item.data;
            })
    ),
    success: function(){
        callback();
    }
);
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>在服务端，Controller中的Action可以处理post过来的json数据，然后以FileResult的方式返回。为了更好地处理CSV文件，我们定义了一个CsvActionResult，它继承自FileResult，并重写了它的WriteFile()方法。浏览器就可以获得CsvActionResult返回的Stream，从而就可以完成文件的下载和保存了。</p>

<!--more-->


<p>然而，这种AJAX异步请求的方式是不工作的。因为发起者是AJAX，这种异步方式会导致浏览器无法收到处理后的Stream。我们在网上搜索了许多资料，都没有很好地解决这种异步方式对json数据的处理，完成文件下载。经过分析，我们大致想到有两种解决思路。</p>

<p>一是方案将导出文件的请求分为两步：一步是异步post数据，让服务端获得客户端传来的json数据，并将其存放到Session中；第二步则是在post成功之后，在异步回调中再次发出一个同步的Get请求，并定义对应的控制器Action响应该Get请求。例如，我们在ExtJS中的postSelectedItems()函数的success()回调中，执行downloadFile()函数，由该函数发出Get请求。同时，在服务端的Controller中定义DownloadFile()方法响应该请求。例如：
{% codeblock lang:csharp %}
[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Export(int environmentId, List<SearchResult> selectedItems) {</p>

<pre><code>Session["SelectedItems"] = selectedItems;
return new EmptyResult();
</code></pre>

<p>}</p>

<p>public ActionResult DownloadFile(int environmentId){</p>

<pre><code>var selectedItems = Session["SelectedItems"] as List&lt;SearchResult&gt;;
var data = selectedItems.ExportCsvData();
var metaData = CsvExportMeta.ExportMetaData();
var exportTime = DateTime.Now;
var fileName = String.Format("export_{0}.csv",exportTime.ToString("yyyyMMddHHmm"));
return new CsvActionResult&lt;SearchResultCsvView&gt;(data) {
    FileDownloadName = fileName,
    MetaData = metaData;
}
</code></pre>

<p>}
{% endcodeblock %}
比较理想的一点是，由于我们在Global.asax.cs的Application_Start()方法中已经添加了如下代码：
{% codeblock lang:js %}
ValueProviderFactories.Factories.Add(new JsonValueProviderFactory());
{% endcodeblock %}</p>

<p>所以，客户端发过来的json数据可以转换为Export()方法接收的List<SearchResult>对象。但是，这种方式将数据存放到了Session中，可能存在隐患。一方面，如果需要导出的数据较多，就可能占用过多的内存空间。一旦访问量增长，就会影响到服务器的稳定性和性能。如果服务端采用集群，则Session还要共享，否则二次请求的时候，可能会被Load Balancer路由到其他服务器。倘若同一个用户连续两次Post，也可能导致导出功能出现问题。整体而言，这种方案并不稳定。</p>

<p>第二种解决思路就是放弃AJAX异步请求的方式，而转用Form表单的Post请求。我们采用了临时编写表单的方式，将post的数据塞到Input的Value中，然后Submit表单。例如在ExtJS的Controller中，我们定义了这样的函数：
{% codeblock lang:js %}
exportSelectedItems: function(gridId) {</p>

<pre><code>var exportWindow = window.open('');
var exportDocument = exportWindow.document;
var form = exportDocument.createElement('form');
form.setAttribute('method', 'post');
form.setAttribute('action', url);

var hiddenField = exportDocument.createElement('input');
hiddenField.setAttribute('value', Ext.encode(
    Ext.getCmp(gridId).getSelectedRecords().map(function (item)) {
        return item.data;
    }
)));
hiddenField.setAttribute('name','selectedItems');
hiddenField.setAttribute('type','hidden');
form.appendChild(hiddenField);
exportDocument.body.appendChild(form);
form.submit();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>现在就可以在服务端的Controller中，只定义一个Export()方法了。此时的Export()方法不再需要List<SearchResult>参数，因为客户端Post过来的数据是放在Request的Form中。我们可以根据设定的name值获得该数据。这个数据是json数组的字符串。现在，有另外一个问题又钻出来了。我们必须将该字符串转换为我们需要的List<SearchResult>对象，然后就可以重用该对象的扩展方法ExportCsvData()方法，将其再转换为CsvActionResult可以接受的类型。回顾之前异步post的方式，在该种方式下，客户端post过来的json数据并没有进行转换，其原因在于我们在Global中，我们向ValueProviderFactories的Factories中注册了JsonValueProviderFactory对象，转换的执行过程事实上是一种反序列化。在JsonValueProviderFactory的私有静态方法GetDeserializedObject()方法中，调用了JavaScriptSerializer对象的DeserializeObject()方法。就是在这个类中，同时还定义了Deserialize<T>泛型方法，而它正是我们所需要的：
{% codeblock lang:csharp %}
[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Export(int environmentId) {</p>

<pre><code>var result = Request.Form.Get("selectedItems");
var selectedItems = new JavaScriptSerializer().
    Deserialize&lt;List&lt;SearchResult&gt;&gt;(result);
var data = selectedItems.ExportCsvData();
var metaData = CsvExportMeta.ExportMetaData();
var exportTime = DateTime.Now;
var fileName = String.Format("export_{0}.csv",exportTime.ToString("yyyyMMddHHmm"));
return new CsvActionResult&lt;SearchResultCsvView&gt;(data) {
    FileDownloadName = fileName,
    MetaData = metaData;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>现在这种方式不再需要向Session存放数据，并且只用了一次请求来完成。虽然是用同步的方式进行Post，但由于post的数据最多不会超过200k，用户不会感受到很明显的阻塞现象，是完全可以接受的。</p>
]]></content>
  </entry>
  
</feed>
