<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Book | 逸言]]></title>
  <link href="http://agiledon.github.com/blog/tags/book/atom.xml" rel="self"/>
  <link href="http://agiledon.github.com/"/>
  <updated>2014-09-23T08:53:50+08:00</updated>
  <id>http://agiledon.github.com/</id>
  <author>
    <name><![CDATA[张逸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何实现领域驱动设计]]></title>
    <link href="http://agiledon.github.com/blog/2014/08/05/how-to-implement-ddd/"/>
    <updated>2014-08-05T19:34:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2014/08/05/how-to-implement-ddd</id>
    <content type="html"><![CDATA[<p>{% img center /images/2014/iddd.jpg %}
从Eric Evans写下经典名著Domain-Driven Design: Tackling Complexity in the Heart of Software至今，DDD刚好发展了十年的时间。它几乎成了开发复杂软件系统主要的领域设计方法，既是面向对象（组件）设计的补充，又超越了面向对象（组件）设计。DDD中提出的诸多概念如实体、值对象、聚合等，已经成为了耳熟能详的设计术语。DDD社区的发展也如火如荼，似乎并没有被层出不穷的设计思想所取代，相反，它仍在强劲地发展，吸收了许多新的概念与方法，例如函数式编程思想、Event Source、CQRS等。然而，就我个人所观察到的情况来看，许多项目虽然号称应用了DDD设计，但主要都停留在Eric所谓的“战术设计”层面。即使是战术层面，依旧有许多程序员没有弄明白实体与值对象之间的区别，不知道该怎么定义聚合以及聚合根，更谈不上合理地划分上下文（Context）。</p>

<p>我不明白其中内含的真实原因，只能冒昧地揣测是否DDD显得高高在上？究其原因，会否还是Eric惹的祸，他的那本经典之作美则美矣，却显得有些不接地气？至少，我的阅读感受正是如此。虽然在之后，国内也引进了其他一些与DDD相关的著作，例如Jimmy Nilsson的著作《领域驱动设计与模式实战》。这些书好虽好，却并没有全面深入地阐述领域驱动设计，更谈不上完整地实践，直到Vaughn Vernon的《实现领域驱动设计（Implementing Domain-Driven Design）》的出现。</p>

<p>这本书首先吸引我的是书中的第2章至第4章。虽然书中内容几乎忠实地反映了Eric Evans的DDD理论，但作者却创造性地在一开始就着眼于DDD的战略性设计，包括领域（Domain）、子域（Subdomain）、受限上下文（Unbounded Context）、上下文映射（Context Map）以及架构。以第4章架构为例，书中对DDD经典的分层架构进行了深入探讨与分析，并颠覆性地提出将基础设施层（Infrastructure Layer）置于用户接口层（User Interface Layer）之上。最初读来，简直让我莫名惊诧，然而仔细思索，从依赖倒置原则的角度来分析，实在是合乎情理。坦白说，它彻底解决了之前一直纠缠在我心底的一个问题：若我们视实体为Repository以及数据访问的对象，应将实体置于哪一层？在DDD中，实体对象承担了领域业务行为，但同时又可能通过ORM与数据表产生映射。基础设施层的数据访问对象（即传统的DAO）需要调用这些实体对象。若它处于最底层，则会造成业务行为与基础设施的混合。若将实体与数据映射对象分离，既会造成对象之间的重复，又会导致不好的贫血对象。而将基础设施层放在分层架构的上端，非常巧妙地解决了这一问题。</p>

<!-- more -->


<p>我尤其喜欢本书引荐的由Corkburn提出的六边形（Hexagonal）架构。它完全突破了传统分层架构的窠臼，以独到的边界划分手法指导我们遵循关注点分离原则。该架构模式对端口（Port）与适配器（Adapter）的强调，使得我们可以在架构分析与设计时，更加关注系统之间的集成点，从而形成可视性极强的物理架构。这对于建立可伸缩的分布式架构尤有价值。我已在多个项目的架构设计中，运用了六边形架构模式，可谓收获颇丰。书中还提到了相对较新的RESTful架构，CQRS架构以及事件驱动的架构模式和网格分布式计算。该书的附录还进一步探讨了聚合对象与事件源的组合设计。这些内容有助于我们树立整体的DDD架构观，可以说弥补了Eric书中对这些内容的空白。</p>

<p>Vaughn Vernon是真正懂得写作的技术专家，他非常懂得如何“讨好”读者。翻开书，阅读第一章，你就会爱上它，爱上DDD。书中给出的例子实在太棒了。看看他对saveCustomer()方法的版本演进，你会幡然醒悟，原来代码应该这样写。领域对象是一位谨慎的保密者，他严格地谨守着自己的秘密，只把业务外部行为暴露给你，使得你可以读懂它，却不应该干扰它的内部实现。这正是DDD中通用语言的价值。身为一名技术人员，我们精通Java、C#、Scala、Ruby等等语言，却忘了在企业开发中，真正需要展现的其实是业务通用语言。写代码首先是与人交流，而不是机器。</p>

<p>本书的精彩章节有很多，几乎阅读每篇都会有感悟。但我个人认为，尤其彰显本书价值的是第8章与第10章。并非其他章节不够好，但相对于实体、值对象等容易理解的概念而言，聚合总是被人所误用，又或者让人茫然不知所措。第10章总结了非常实用的聚合设计原则。例如，在一致性边界之内对真正的不变量进行建模的原则；设计小聚合的原则；通过唯一标识引用其他聚合的原则。在边界之外使用最终一致性的原则。</p>

<p>至于第8章介绍的Domain Event，则是因为它不同于Eric的著作，将事件当做了与实体同等地位的头等公民。结合本书对事件驱动以及事件源的讲解，相信你在之后的领域建模时，会重视对领域事件的识别。若能正确地理解事件，则可以更好地掌握CQRS模式，并因地制宜地运用这一模式。</p>

<p>该书书名为Implementing（实现） Domain-Driven Design，就说明作者的意图是要让DDD真正落地。怎么做到？——上实例！书中给出的虽然是虚拟案例，却非常接近真实。作者甚至按照一种演进设计的方式深入浅出地介绍了这两个完整案例。最能够帮助人理解的是，他在讲授DDD时，还结合案例给出了之前欠佳的反面案例，并通过识别设计的坏味道，运用DDD方式对其进行改进。作者甚至创造了虚拟的场景，使得我们在阅读这些内容时，就好像真正参与了设计师的讨论，甚至能听到他们的唇枪舌剑，最后是DDD专家的总结陈词，真好比身临其境地加入了这个虚拟团队，一起学习，一起分享，共同成长。</p>

<p>坦白说，我在阅读本书时方才发觉自己在DDD上的浅薄无知。或许是自己的悟性不够，未能很好地理解Eric提出的DDD概念。阅读此书，让我有醍醐灌顶之感。现在，对于DDD，我已渐窥门径。若能多结合项目实践，定能登堂入室，甚至走得更远。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks中国区文集出版]]></title>
    <link href="http://agiledon.github.com/blog/2014/08/01/thoughtworks-china-book/"/>
    <updated>2014-08-01T23:25:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2014/08/01/thoughtworks-china-book</id>
    <content type="html"><![CDATA[<p>{% img center /images/2014/tw_book.png %}</p>

<p>这次参加TID会议，居然看到了这本耗时达3年的书《<a href="http://product.china-pub.com/4243605">软件开发践行录——ThoughtWorks中国区文集</a>》——终于出版了。很早以前，凯峰就提出这个想法，当时他作为InfoQ中文站原创社区的主编，着实策划了不少优秀的原创技术文章。凯峰作为ThoughtWorks的一份子，很好地搭建了ThoughtWorks实践与社区的分享桥梁。不少由TWer撰写的优秀文章陆续在InfoQ发表。然而，从想法到本书出版经历了如此漫长的时间，却也出乎我意料之外。大约一年前，在我提供了个人信息给负责此事的同事后，就没再关心此事，差不多就要淡忘了。如今看到这本漂亮的汇集了中国区TWer心得体会的小书，真是莫名的惊喜啊。就好似那些珍贵的东西你会忘记，却在再次遇见时，忽然发现这种珍贵一点都没有减少。</p>

<p>无论如何，我都为加入ThoughtWorks感到开心而自豪；我也为能有文章选入这本文集而感到荣幸。这是一本散文集，是我们书写在IT边上的日志，又或是一种对技术的诠释与注解，未必必然美丽，却是心灵的一种悸动，一声叹息，是因为技术的狂热而挑动的心弦。这份执着，更是一种美——必然是美！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThoughtWorks(中国)程序员读书雷达]]></title>
    <link href="http://agiledon.github.com/blog/2013/04/17/thoughtworks-developer-reading-radar/"/>
    <updated>2013-04-17T21:46:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2013/04/17/thoughtworks-developer-reading-radar</id>
    <content type="html"><![CDATA[<p>{% img center /images/2013/04/reading-radar.jpg %}
软件业的特点是变化。若要提高软件开发的技能，就必须跟上技术发展的步伐。埋首醉心于项目开发与实战，固然能够锤炼自己的开发技巧，却难免受限于经验与学识。世界上并不存在速成的终南捷径，但阅读好的技术书籍，尤其是阅读大师们的经典著作，总能收到事半功倍之效。一位优秀的程序员，或许就是一名好的阅读者。好的阅读者，总是知道如何选择好的书籍。书海浩繁，良莠不齐。阅读技术好书，如与智者交谈，“与君一席话胜读十年书”；遭遇技术烂书，如被拐卖，“少小离家老大回，乡音无改鬓毛衰”。</p>

<p>ThoughtWorks作为一家学习型组织，颇为看重每一位员工的学习能力。事实上，大多数ThoughtWorker的骨子里，都溢满了读书的基因。与书相伴，与书为伍，既是一种乐趣，又是一种习惯。当习惯成为自然时，书籍就成为生活和工作不可或缺的一部分了。如果说人文历史哲学等书籍是一碗心灵鸡汤，技术书籍大抵算得上是一味营养素，读之可以直接带来养分；可若是不了解自己究竟缺了哪一种营养，乱吃乱补，结果就可能适得其反了。有鉴于此，我和同事刘龙军结合自身的阅读经验，为新入职ThoughtWorks的程序员制作了一份读书路线图。我们将范围明确为程序员，是因为作为程序员的我们，它是我们最了解的工作角色。我们筛选出了一些大家公认的经典书籍，再结合自己的阅读体会，并广泛征集了更多ThoughtWorker的意见，包括徐昊，熊节，郑晔等资深阅读者，得到了这样一份草稿。在中国公司内部推出时，这份读书路线图得到了多数人的认可和欢迎。继而，我们在成都办公室陆续针对此读书路线图展开了读书俱乐部的活动，算是做了一次全方位大面积的试水。</p>

<!--more-->


<p>现在，我们觉得是推出正式版本，并面向更多受众的时机了。这就是大家现在看到的ThoughtWorks(中国)程序员读书雷达。它相较于之前的读书路线图草稿，分类更为专业，书籍筛选更为合理，并以雷达独有的优势，来展现不同的阅读维度与阅读深度。显然，读书雷达更能表达我们对所选书籍的深度认识。它可以作为学习型组织的一份知识输入，每一位程序员都可以根据自身水平与能力，选择适合自己的书籍，甚至组成一份表达阅读履历的读书路线图，在获得知识完善与汲取的过程中，提高自身能力，达至各个维度的巅峰。</p>

<p>该读书雷达将书籍分为了如下四个象限：
{% blockquote %}
Coding Practice（编程实践）
Architecture &amp; Design（架构与设计）
Methodology（方法学）
Thought &amp; Leadership（思想与领导力）
{% endblockquote %}</p>

<p>我们之所以将方法学、思想与领导力放入到这个为程序员设计的读书雷达中，乃是因为软件开发不仅仅是个人的活动，也不仅仅是编码技巧和设计能力的体现。我们认为，开发技能其实是一项综合的系统工程。了解方法学，可以促进你对开发过程的理解；关于思想，则涉及大脑思维的修炼，可以提高程序员的抽象能力、学习能力，有助于帮助程序员发现事物发展的规律和本质；至于领导力，则有助于程序员在开发团队中发挥更大的作用，并能作为很好的团队成员，提升团队的整体能力。我们没有在这个读书雷达中包括语言类的书籍，原因在于这类书籍太过于发散，且更新较快；我们也不可能奢望在一张读书雷达图中，为不同的语言平台展现不同的优秀书籍。相比较语言的学习，我们更看重程序员在编程实践上的基本功。</p>

<p>每个象限皆分为三个等级，分别为Fundamental、Medium和Advanced，对应初学、进阶和高级。在雷达图中，读者可以根据该书在图中距离圆心的远近，判断它的难度级别。我们还使用了不同的图示来表达对每本书的倾向性意见，其中，橙色的三角形图示代表“强烈推荐”，蓝色的圆形图示代表“推荐”。我们希望这类书籍对于程序员而言，可以根据自己目前的水平，选择适合自己的书籍。在这个层次上，强烈推荐可能就意味着必读。</p>

<p>或许有人会质疑读书雷达的挑选标准。正所谓“每个人心中都有自己的哈姆雷特”，我们认同的未必能得到读者的认同，这是我们这个世界关于一种观点或态度的常态。我们发布这个读书雷达，只是希望能提供更多有用的信息与参考，而非代表一种读书权利的绝对化。事实上，我们也不可能做到。此外，"吾生也有涯，而知也无涯"，我们阅读的书籍毕竟有限，且读书雷达的容量也有限，难免会有遗珠之叹，这也是一件无可奈何之事。然而，我们欢迎更多的批评与建议，或许你推荐的好书恰恰是我们遗忘的，又或者激起了我们的共识，那么我们也会毫不吝啬地更新读书雷达，以求做到我们能力范围内的尽善尽美。当然，正如你看到的，我们在Methodology（方法学）象限，更多地推荐了与敏捷和精益相关的书籍。这是因为我们对敏捷技能与方法更有心得和信心。对于我和刘龙军还不够擅长的领域，我们不敢也不愿做出可能误导人的推荐。</p>

<p>本读书雷达虽然冠以ThoughtWorks（中国）之名，但选书的倾向与意见并非ThoughtWorks（中国）官方的态度，而是作为制作者（龙军和我）个人表达的意见而已。如果你也加入了ThoughtWorks，你一定会发现这种自发组织的民间活动，在ThoughtWorks可谓俯拾皆是，不用诧异。</p>

<p>我将在后面的文章中，根据每个象限为每一本书给出我们的推荐理由。此时，书籍成为了我们的臣民，我想对这个王国做一次不吝惜赞赏的巡视。最后，列出读书雷达的中英文书单，如下所示(感谢凯峰为这个雷达图建立的豆列，可以访问<a href="http://book.douban.com/doulist/2012097/">ThoughtWorks(中国)程序员读书雷达</a>)：</p>

<h3>Coding Practice | 编程实践</h3>

<h4>基础篇</h4>

<p>{% blockquote %}
Clean Code《代码整洁之道》
Pragmatic Unit Testing《单元测试之道》
The Productive Programmer《卓有成效的程序员》
Test-Driven Development By Example《测试驱动开发》
Clean Coder《程序员的职业修养》
The Art of Readable Code《编写可读代码的艺术》
{% endblockquote %}</p>

<h4>进阶篇</h4>

<p>{% blockquote %}
Refactoring To Patterns《重构与模式》
Implementation Patterns《实现模式》
Code Complete《代码大全》
The Pragmatic Programmer《程序员修炼之道》
{% endblockquote %}</p>

<h4>高级篇</h4>

<p>{% blockquote %}
Structure and Interpretation of Computer Programs《计算机程序的构造和解释》
Working Effectively with Legacy Code《修改代码的艺术》
{% endblockquote %}</p>

<h3>Architecture &amp; Design | 架构与设计</h3>

<h4>基础篇</h4>

<p>{% blockquote %}
Agile Software Development 《敏捷软件开发：原则、实践与模式》
Head First Design Patterns《深入浅出设计模式》
Design Patterns 《设计模式》
{% endblockquote %}</p>

<h4>进阶篇</h4>

<p>{% blockquote %}
The Art of UNIX Programming 《Unix编程艺术》
Practical API Design  《框架设计的艺术》
Domain Specific Languages 《领域特定语言》
Patterns of Enterprise Application Architecture 《企业应用架构模式》
{% endblockquote %}</p>

<h4>高级篇</h4>

<p>{% blockquote %}
Release It
Domain-Driven Design 《领域驱动设计》
Enterprise Integration Patterns《企业集成模式》
Beautiful Architecture《架构之美》
Pattern-Oriented Software Architecture《面向模式的软件架构》
{% endblockquote %}</p>

<h3>Methodology | 方法学</h3>

<h4>基础篇</h4>

<p>{% blockquote %}
User Stories Applied《用户故事与敏捷方法》
The Gold Mine《金矿》
Scrum and XP From the Trenches《硝烟中的Scrum和XP》
Continuous Integration《持续集成》
Extreme Programming Explained《解析极限编程》
{% endblockquote %}</p>

<h4>进阶篇</h4>

<p>{% blockquote %}
Lean Thinking《精益思想》
Continuous Delivery《持续交付》
How Google Tests Software
Agile Testing
Extreme Programming Refactored《重构极限编程》
{% endblockquote %}</p>

<h4>高级篇</h4>

<p>{% blockquote %}
Specification By Example
{% endblockquote %}</p>

<h3>Thought &amp; Leadership | 思想与领导力</h3>

<h4>基础篇</h4>

<p>{% blockquote %}
The Effective Executive《卓有成效的管理者》
Are Your Lights On?《你的灯亮着吗》
Becoming A Technical Leader《成为技术领导者》
{% endblockquote %}</p>

<h4>进阶篇</h4>

<p>{% blockquote %}
The Fifth Discipline《第五项修炼》
The Design Of Business
Management 3.0《管理3.0：培养和提升敏捷领导力》
Presentation To Win
The McKinsey Way《麦肯锡方法》
{% endblockquote %}</p>

<h4>高级篇</h4>

<p>{% blockquote %}
Thinking, Fast and Slow《思考快与慢》
{% endblockquote %}</p>
]]></content>
  </entry>
  
</feed>
