<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Octopress | 简单文本]]></title>
  <link href="http://agiledon.github.com/blog/tags/octopress/atom.xml" rel="self"/>
  <link href="http://agiledon.github.com/"/>
  <updated>2014-02-07T17:59:43+08:00</updated>
  <id>http://agiledon.github.com/</id>
  <author>
    <name><![CDATA[张逸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为Octopress创建Tag]]></title>
    <link href="http://agiledon.github.com/blog/2013/01/08/create-tag-for-octopress/"/>
    <updated>2013-01-08T15:55:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2013/01/08/create-tag-for-octopress</id>
    <content type="html"><![CDATA[<p>Octopress本身并不支持生成Tag，而仅仅支持Category。许多为Octopress提供的Tag Cloud，事实上一种假象，乃Category Cloud。对于博客分类而言，Tag与Category完全是不同的维度。Octopress的Category原理，事实上就是在博客目录下建立对应的Category目录，我们完全可以照搬此做法，简单改造，就可以支持Tag了。当然，为了在博客上生成Tag Cloud，自然还需要使用一些现有的插件。</p>

<h3>准备</h3>

<p>Octopress有一个第三方插件<a href="https://github.com/bizkit/octopress-cumulus">octopress-cumulus</a>，可以生成酷酷的3D Tag Cloud。当然，本质上，这还是Category Cloud。但它的效果可以为我使用。因此，先按照该插件的要求，下载对应的文件。最重要的两个文件是source/javascripts目录下的tagcloud.swf与plugin目录下的category_cloud.rb。前者是生成3D效果的Flash；后者则是读取Category信息到swf中的插件。至于source/_includes/custom/asides/目录下的category_cloud.html文件，则是用于显示边栏的Tag Cloud效果。</p>

<!--more-->


<h3>生成Tag</h3>

<p>Octopress用于生成Category的ruby文件放在plugin中，文件名为category_generator.rb。参考该文件，我们可以实现自己的tag_generator.rb。它们之间有许多相似之处，若要避免重复代码，完全可以做一些公共实现的提取。无奈，我们也不能直接去改category_generator.rb，所以就采用了最偷懒的办法。先复制文件，然后再将与Category有关的为Tag。原理完全一样，就是读取markdown里设置的tags标签值，为tag生成对应的目录。代码如下：
```ruby tag_generator.rb
module Jekyll</p>

<p>  # The TagIndex class creates a single tag page for the specified tag.
  class TagIndex &lt; Page</p>

<pre><code># Initializes a new TagIndex.
#
#  +base+         is the String path to the &lt;source&gt;.
#  +tag_dir+ is the String path between &lt;source&gt; and the tag folder.
#  +tag+     is the tag currently being processed.
def initialize(site, base, tag_dir, tag)
  @site = site
  @base = base
  @dir  = tag_dir
  @name = 'index.html'
  self.process(@name)
  # Read the YAML data from the layout page.
  self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')
  self.data['tag']    = tag
  # Set the title for this page.
  title_prefix             = site.config['tag_title_prefix'] || 'Tag: '
  self.data['title']       = "#{title_prefix}#{tag}"
  # Set the meta-description for this page.
  meta_description_prefix  = site.config['tag_meta_description_prefix'] || 'Tag: '
  self.data['description'] = "#{meta_description_prefix}#{tag}"
end
</code></pre>

<p>  end</p>

<p>  # The tagFeed class creates an Atom feed for the specified tag.
  class TagFeed &lt; Page</p>

<pre><code># Initializes a new tagFeed.
#
#  +base+         is the String path to the &lt;source&gt;.
#  +tag_dir+ is the String path between &lt;source&gt; and the tag folder.
#  +tag+     is the tag currently being processed.
def initialize(site, base, tag_dir, tag)
  @site = site
  @base = base
  @dir  = tag_dir
  @name = 'atom.xml'
  self.process(@name)
  # Read the YAML data from the layout page.
  self.read_yaml(File.join(base, '_includes/custom'), 'tag_feed.xml')
  self.data['tag']    = tag
  # Set the title for this page.
  title_prefix             = site.config['tag_title_prefix'] || 'Tag: '
  self.data['title']       = "#{title_prefix}#{tag}"
  # Set the meta-description for this page.
  meta_description_prefix  = site.config['tag_meta_description_prefix'] || 'Tag: '
  self.data['description'] = "#{meta_description_prefix}#{tag}"

  # Set the correct feed URL.
  self.data['feed_url'] = "#{tag_dir}/#{name}"
end
</code></pre>

<p>  end</p>

<p>  # The Site class is a built-in Jekyll class with access to global site config information.
  class Site</p>

<pre><code># Creates an instance of tagIndex for each tag page, renders it, and
# writes the output to a file.
#
#  +tag_dir+ is the String path to the tag folder.
#  +tag+     is the tag currently being processed.
def write_tag_index(tag_dir, tag)
  index = TagIndex.new(self, self.source, tag_dir, tag)
  index.render(self.layouts, site_payload)
  index.write(self.dest)
  # Record the fact that this page has been added, otherwise Site::cleanup will remove it.
  self.pages &lt;&lt; index

  # Create an Atom-feed for each index.
  feed = TagFeed.new(self, self.source, tag_dir, tag)
  feed.render(self.layouts, site_payload)
  feed.write(self.dest)
  # Record the fact that this page has been added, otherwise Site::cleanup will remove it.
  self.pages &lt;&lt; feed
end

# Loops through the list of tag pages and processes each one.
def write_tag_indexes
  if self.layouts.key? 'tag_index'
    dir = self.config['tag_dir'] || 'tags'
    self.tags.keys.each do |tag|
      self.write_tag_index(File.join(dir, tag.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), tag)
    end

  # Throw an exception if the layout couldn't be found.
  else
    throw "No 'tag_index' layout found."
  end
end
</code></pre>

<p>  end</p>

<p>  # Jekyll hook - the generate method is called by jekyll, and generates all of the tag pages.
  class GenerateTags &lt; Generator</p>

<pre><code>safe true
priority :low

def generate(site)
  site.write_tag_indexes
end
</code></pre>

<p>  end</p>

<p>  # Adds some extra filters used during the tag creation process.
  module Filters</p>

<pre><code># Outputs a list of tags as comma-separated &lt;a&gt; links. This is used
# to output the tag list for each post on a tag page.
#
#  +tags+ is the list of tags to format.
#
# Returns string
#
def tag_links(tags)
  dir = @context.registers[:site].config['tag_dir']
  tags = tags.sort!.map do |item|
    "&lt;a class='category' href='http://agiledon.github.com/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/'&gt;#{item}&lt;/a&gt;"
  end

  case tags.length
  when 0
    ""
  when 1
    tags[0].to_s
  else
    "#{tags[0...-1].join(', ')}, #{tags[-1]}"
  end
end

# Outputs the post.date as formatted html, with hooks for CSS styling.
#
#  +date+ is the date object to format as HTML.
#
# Returns string
def date_to_html_string(date)
  result = '&lt;span class="month"&gt;' + date.strftime('%b').upcase + '&lt;/span&gt; '
  result += date.strftime('&lt;span class="day"&gt;%d&lt;/span&gt; ')
  result += date.strftime('&lt;span class="year"&gt;%Y&lt;/span&gt; ')
  result
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>有了这个ruby文件，当我们在执行rake generate时，就可以生成对应的tag了。</p>

<h3>生成Tag Cloud</h3>

<p>有了生成好的tag，就可以生成Tag Cloud。现在，先将octopress-cumulus插件提供的category_cloud.rb改名为tag_cloud.rb，以避免混淆试听。然后再修改它的实现。基本原理就是将category相关的信息如category_dir改为与Tag有关的。还是直接将修改后的内容送上吧：
```ruby tag_cloud.rb  <br/>
module Jekyll</p>

<p>  class TagCloud &lt; Liquid::Tag</p>

<pre><code>def initialize(tag_name, markup, tokens)
  @opts = {}
  @opts['bgcolor'] = '#ffffff'
  @opts['tcolor1'] = '#333333'
  @opts['tcolor2'] = '#333333'
  @opts['hicolor'] = '#000000'

  opt_names = ['bgcolor', 'tcolor1', 'tcolor2', 'hicolor']

  opt_names.each do |opt_name|
      if markup.strip =~ /\s*#{opt_name}:(#[0-9a-fA-F]+)/iu
        @opts[opt_name] = $1
        markup = markup.strip.sub(/#{opt_name}:\w+/iu,'')
      end
  end

  opt_names = opt_names[1..3]
  opt_names.each do |opt_name|
      @opts[opt_name] = '0x' + @opts[opt_name][1..8]
  end

  super
end

def render(context)
  lists = {}
  max, min = 1, 1
  config = context.registers[:site].config
  tag_dir = config['url'] + config['root'] + config['tag_dir'] + '/'
  tags = context.registers[:site].tags
  tags.keys.sort_by{ |str| str.downcase }.each do |tag|
    count = tags[tag].count
    lists[tag] = count
    max = count if count &gt; max
  end

  bgcolor = @opts['bgcolor']

  bgcolor = @opts['bgcolor']
  tcolor1 = @opts['tcolor1']
  tcolor2 = @opts['tcolor2']
  hicolor = @opts['hicolor']

  html = ''
  html &lt;&lt; "&lt;embed type='application/x-shockwave-flash' src='http://agiledon.github.com/javascripts/tagcloud.swf'"
  html &lt;&lt; "width='100%' height='250' bgcolor='#{bgcolor}' id='tagcloudflash' name='tagcloudflash' quality='high' allowscriptaccess='always'"

  html &lt;&lt; 'flashvars="'
  html &lt;&lt; "tcolor=#{tcolor1}&amp;amp;tcolor2=#{tcolor2}&amp;amp;hicolor=#{hicolor}&amp;amp;tspeed=100&amp;amp;distr=true&amp;amp;mode=tags&amp;amp;"

  html &lt;&lt; 'tagcloud='

  tagcloud = ''
  tagcloud &lt;&lt; '&lt;tags&gt;'


  lists.each do | tag, counter |
    url = tag_dir + tag.gsub(/_|\P{Word}/u, '-').gsub(/-{2,}/u, '-').downcase
    style = "font-size: #{10 + (40 * Float(counter)/max)}%"

    tagcloud &lt;&lt; "&lt;a href='#{url}' style='#{style}'&gt;#{tag}"
    tagcloud &lt;&lt; "&lt;/a&gt; "

  end

  tagcloud &lt;&lt; '&lt;/tags&gt;'

  # tagcloud urlencode
  tagcloud = CGI.escape(tagcloud)

  html &lt;&lt; tagcloud
  html &lt;&lt; '"&gt;'
  html
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_tag('tag_cloud', Jekyll::TagCloud)
```</p>

<p>Octopress是将Category写到了blog/categories下，因此我将Tag写到了blog/tags下。这就是上面代码中tag_dir的值。这个值应该配置在_config.yml下：如下所示：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr></td><td class='code'><pre><code class=''><span class='line'>category_dir: blog/categories
</span><span class='line'>tag_dir: blog/tags</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>同样的，你也可以把custom\asides下的category_cloud.html改为tag_cloud.html。当然，要记住，改名后，还需要到_config.yml的asides设置中做相应修改。</p>

<h3>扫尾工作</h3>

<p>现在，博客右侧的Tag Cloud应该可以工作了。但是，当你去单击某个Tag时，会出现404页面。此外，每篇博客下面仅显示了Category的信息。该怎么解决？</p>

<p>首先，你需要转到source/_layouts/文件夹下，复制category_index.html文件，更名为tag_index.html文件，将div内的内容修改为：

```html tag_index.html</p>

<div id="blog-archives" class="category">
{% for post in site.tags[page.tag] %}
{% capture this_year %}{{ post.date | date: "%Y" }}{% endcapture %}
{% unless year == this_year %}
  {% assign year = this_year %}
  <h2>{{ year }}</h2>
{% endunless %}
<article>
  {% include archive_post.html %}
</article>
{% endfor %}
</div>


<p>```
</p>

<p>仍然在该文件夹下，打开post.html文件，在footer节对应的Category下方，增加如下内容：

```html post.html</p>

<pre><code>&lt;p class="meta"&gt;
  Tags: {% include post/tags.html %}
&lt;/p&gt;
</code></pre>

<p>```
</p>

<p>接下来，转到source/_includes/post/目录下，创建tags.html文件，内容为：

```html tags.html
{% capture tag %}{% if post %}{{ post.tags | tag_links | size }}{% else %}{{ page.tags | tag_links | size }}{% endif %}{% endcapture %}
{% unless tag == '0' %}
<span class="categories">
  {% if post %}</p>

<pre><code>{{ post.tags | tag_links }}
</code></pre>

<p>  {% else %}</p>

<pre><code>{{ page.tags | tag_links }}
</code></pre>

<p>  {% endif %}
</span>
{% endunless %}
```
</p>

<p>若要支持Tag的Feed，还可以在source/_includes/custom目录下模仿category_feed.xml，创建一个tag_feed.xml。这里就不再赘述。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress的新浪微博插件]]></title>
    <link href="http://agiledon.github.com/blog/2012/12/26/weibo-plugin-for-octopress/"/>
    <updated>2012-12-26T12:26:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2012/12/26/weibo-plugin-for-octopress</id>
    <content type="html"><![CDATA[<p>在GitHub上搭建了Octopress博客后，我一直在尝试改进或增强一些功能。有一些功能可以在网上找到第三方插件。因为我在GitHub上的博客是刚刚申请，并没有太多人知道我的博客域名。如果希望我自己新写的博客让更多人知道，最好的方式还是能够将链接发到我的新浪微博中。一些插件为octopress提供了新浪微博的share按钮，但这并不是我想要的。也许已经有快速现成的方法支持我想要的功能，但我没有找到。那么何必还去上穷碧落下黄泉的去搜索了，身为一个程序员，这种事情就自己搞定好了。正好可以练手Ruby。经过半天的代码编写和测试，我的这个新浪微博插件就实现了。它主要能够运行rake命令，解析最新博客的标题与URL，再替换weibo-config.yml配置文件中配置的微博模板的内容，并将其发布到新浪微博中。</p>

<!--more-->


<h2>实现</h2>

<p>我最初是在octopress的plugin目录下创建了post_weibo.rb文件。后来发现，当我们执行rake generate时，它事实上会去执行jekyll命令。而该命令则会去遍历plugin目录下的ruby文件，并执行之。这显然不是我希望看到的。我希望在发表的新博客完全就绪时，我再考虑发送通知到新浪微博。于是，我单独建立了一个新的文件夹"_custom"，并将post_weibo.rb文件放进去。</p>

<p>post_weibo.rb文件实现了这个插件的所有功能，主要方法为post_weibo()，如下所示：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">post_weibo</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;conn = Faraday.new(:url =&amp;gt; &quot;https:/</span><span class="o">/</span><span class="n">api</span><span class="o">.</span><span class="n">weibo</span><span class="o">.</span><span class="n">com</span><span class="s2">&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">result = conn.post &#39;/2/statuses/update.json&#39;,</span>
</span><span class='line'><span class="s2">                   :access_token =&amp;gt; @weibo_config[&#39;access_token&#39;],</span>
</span><span class='line'><span class="s2">                   :status =&amp;gt; generate_post</span>
</span><span class='line'><span class="s2">puts &quot;</span><span class="n">post</span> <span class="n">successful</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>它使用了faraday来发送post请求到新浪api。发送请求时需要获得access_token。该值可以到新浪申请。具体API说明请查阅<a href="http://open.weibo.com/wiki/2/statuses/update">开发文档</a>。</p>

<p>post_weibo.rb文件的其余方法皆是为生成微博内容服务的。具体代码可以通过我在<a href="https://github.com/agiledon/octopress-weibo">github上的repository</a>获得，这里不再赘述。大体思路是通过获得_post目录下创建日期最近的markdown文件，读取该文件，获得title的值。解析文件名，获得博客链接地址的后面部分，至于前面部分（即博客地址），则从_config.yml中获取，然后组装成正确的博客URL。接下来，再从新增的weibo-config.yml中读取配好的template，将title和url替换，并作为status值，交给post请求。</p>

<h2>Rake任务</h2>

<p>我单独加入了一个Rake任务，这样方便我们执行以发送微博。方法是打开octopress根目录下的Rakefile文件，在合适位置加入如下内容：</p>

<pre><code>desc "Post the title and url of latest blog to Sina Weibo"
    task :weibo do
    puts "Post the title and url of latest blog to Sina Weibo"
    system "ruby _custom/post_weibo.rb"
end
</code></pre>

<h2>配置</h2>

<p>要正确的发送微博，就必须在新增的weibo-config.yml中配置好相关信息。主要需要配置你的access_token与微博模板，如下所示：</p>

<pre><code>access_token: Your access token provided by Sina weibo
post_template: 我在agiledon.github.com上发表了最新博客《%{blog_title}》，请访问链接：%{blog_url}
</code></pre>

<p>注意，在配置post_template时，你虽然可以任意修改模板内容，但不能修改我事先留下的两个变量，即%{blog_title}和%{blog_title}。模板内容支持英语、中文和其他语言。</p>

<p>例如，如果你创建了一个新的博客，文件名为2012-12-25-test-demo.markdown，标题为“测试演示"。那么，你所发表的微博内容就应该为：</p>

<pre><code>我在agiledon.github.com上发表了最新博客《测试演示》，请访问链接：http://agiledon.github.com/2012/12/25/test-demo
</code></pre>

<p>当然，这里的http://agiledon.github.com取决于你在_config.yml中的url配置。</p>

<p>为了保证你的access_token安全，你可以在.gitignore中加入新增配置weibo-config.yml，从而避免对该配置的提交。这也是我为什么要将weibo-config.yml中的配置信息从_config.yml中独立出来的缘故。</p>

<h2>依赖</h2>

<p>因为在post_weibo.rb文件中，我使用了一个第三方库faraday来简化发送post请求的ruby代码。为保证rake命令的正确执行，应该在Gemfile文件中加入如下内容:</p>

<pre><code>gem "faraday", "~&gt; 0.8.4"
</code></pre>

<p>加入后，在转到octopress根目录下，运行如下命令安装faraday：</p>

<pre><code>bundle install
</code></pre>

<h2>使用</h2>

<p>如果一切配置妥当，当你编写了新的博客并发表到博客上之后，只要你认为一切Ok了，就可以执行命令：</p>

<pre><code>rake weibo
</code></pre>

<p>它就会自动将最新博客的标题与URL按照你事先设定的模板内容，发布到你的新浪微博中。一旦发布成功，在控制台下会显示“post successful!”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress博客问题解决方案与技巧]]></title>
    <link href="http://agiledon.github.com/blog/2012/12/25/octopress-issues-solution-and-tips/"/>
    <updated>2012-12-25T09:14:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2012/12/25/octopress-issues-solution-and-tips</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/2012/12/octopress.jpg" width="259" height="154"></p>

<p>在GitHub上创建了自己的博客后，先后在Jekyll和Octopress之间来回折腾了好一段时间。之前打算直接使用Jekyll提供的博客模板，后来觉得太费神，看到Octopress还不错，且它也是基于Jekyll，并能非常方便地部署到GitHub上。经过最初的安装到对博客的深入改造，目前我的博客需要的功能已经大致完成。在这个过程中，也碰到了许多问题。通过搜索Google以及自己阅读Octopress代码，找到了对应的解决办法。此外，也有一些小技巧的积累。考虑到还有许多正在使用或想要使用Octopress的朋友，因此在这里集中分享一下。</p>

<!--more-->


<p><strong>不能在ZSH中输入命令的问题</strong></p>

<p>Octopress提供了许多Rake任务，可以方便地完成一些操作。常用的命令是rake new_post["title"]。但是在ZSH下，输入这样的命令，会提示错误：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr></td><td class='code'><pre><code class=''><span class='line'>zsh: no matches found: new_post[...]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>原因是诸如[]之类的不是正确的命令字符。当然，我们也可以使用转义符来解决这一问题。但每次都需要敲入转义符，实在是太麻烦了。解决方案是在~/.zshrc文件下，加入这样一行内容：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr></td><td class='code'><pre><code class=''><span class='line'>alias rake="noglob rake"</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>解决中文乱码问题</strong></p>

<p>Octopress要创建一篇博客，可以直接运行rake new_post["title"]，它会在source/_post下创建一个markdown文件。同时，它会将你输入的title作为blog的链接URL。我们可以通过一些工具，例如EMacs或者MouApp（在Mac OS下）打开该文件进行编辑。但是，当我将markdown文件打开，修改title为中文，且输入中文博客时，再运行rake generate生成博客页面时，会报告编码错误。信息为：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr></td><td class='code'><pre><code class=''><span class='line'>gems/ruby-1.9.2-p290/gems/jekyll-0.11.0/lib/jekyll/convertible.rb:32:in `read_yaml': invalid byte sequence in US-ASCII (ArgumentError)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是因为jekyll代码没有很好地支持多种编码的缘故。解决办法是找到提示信息中的convertible.rb文件，将第29行的如下代码：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="nb">name</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>修改为：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="nb">name</span><span class="p">),</span> <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s2">&quot;utf-8&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>有的<a href="http://jokry.com/2012/03/08/octopress/">博客</a>还提到ruby环境的问题。我并没有碰到。我使用的版本是ruby 1.9.3。如果遇到类似问题，根据这篇博客的讲解，可以修改ruby环境下的setup_environment.bat文件，在文件最后加入2行：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr></td><td class='code'><pre><code class=''><span class='line'>set LC_ALL=en_US.UTF-8
</span><span class='line'>set LANG=en_US.UTF-8</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>中文博客名称的问题</strong></p>

<p>前面已经提到，rake new_post[""]命令会将双引号引起来的标题作为blog链接的一部分。这就必然导致一个问题，就是我们无法在new_post[""]命令中直接使用中文作为博客的标题。带来的问题是，我们每次都需要在创建了博客之后，再打开markdown文件，去修改文件前方的title内容为中文。这无疑增加了工作量。解决的办法很简单，因为new_post就是一个rake任务而已，我们可以参照该任务，创建一个自己的任务，添加一个新的参数alias，将它作为我们需要的中文标题。</p>

<p>打开在octopress根目录下的Rakefile文件，在文件末尾增加如下代码：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Begin a new post in </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2"> with Alias&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:title_alias</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run &lt;code&gt;rake install&lt;/code&gt; to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="n">with_defaults</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;new-post&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>  <span class="n">title_alias</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title_alias</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;abort(&quot;rake aborted!&quot;) if ask(&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="sr"> already exists. Do you want to overwrite?&quot;, [&#39;y&#39;, &#39;n&#39;]) == &#39;n&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  puts &quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">  open(filename, &#39;w&#39;) do |post|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title_alias</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>新的post任务接收两个参数，第一个参数与之前的new_post任务需要的参数完全相同，第二个参数alias就可以设置到markdown文件的title:中。例如我们要建立一个博客，标题为“如何建立Octopress博客”，则可以输入命令：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr></td><td class='code'><pre><code class=''><span class='line'>rake post["How to create octopress blog","如何建立Octopress博客"]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>注意，除了第二个参数引号内的内容可以用中文外，其他字符包括双引号、逗号和中括号都应该是Utf-8字符。此外，Title和Alias之间用“,”隔开，“,”后不能加空格。</strong></p>

<p><strong>图片问题</strong></p>

<p>加入图片在Octopress中，支持的Markdown语法为：</p>

<p>
<code>
{% img [position] [url] [width] [height] %}
</code>
</p>

<p>position可以设置为left，right或center。url可以是网上的图片url。如果是自己博客的图片，通常建议放在source/images目录下。为了将来更好地维护，建议按照年和月建立两层目录，如2012/12。因为rake generate命令会自动生成博客，放在source/images目录下的图片也会被复制过去。因而在markdown的img语法中，图片的url应该是/images/2012/12/picture.jpg。</p>

<p><strong>代码问题</strong></p>

<p>Octopress支持的代码高亮有很多。我个人还是比较喜欢直接用codeblock标签。虽然每次敲入这个codeblock不太方便，但它胜在灵活见解。例如，粘贴的代码为ruby语言，就可以在代码片段前后分别加上：

```
{% codeblock lang:ruby %}</p>

<h1>Here is ruby source code</h1>

<p>{% endcodeblock %}
```
</p>

<p><strong>摘要问题</strong></p>

<p>如果希望在首页只显示一部分内容，例如摘要，也非常简单。只需要在你希望首页显示的内容最后，输入：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;!--more-->
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>插件</strong></p>

<p>在<a href="http://octopress.org/docs/">Octopress官方网站</a>提供了一些插件说明和相关链接，但还有一些第三方的插件是放在这个<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">网站链接</a>下的。我自己也写了一个针对新浪微博的插件，会在<a href="http://agiledon.github.com/blog/2012/12/26/weibo-plugin-for-octopress/">下一篇博客</a>中详细介绍。</p>
]]></content>
  </entry>
  
</feed>
