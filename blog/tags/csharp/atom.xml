<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: CSharp | 逸言]]></title>
  <link href="http://agiledon.github.com/blog/tags/csharp/atom.xml" rel="self"/>
  <link href="http://agiledon.github.com/"/>
  <updated>2014-09-25T13:07:50+08:00</updated>
  <id>http://agiledon.github.com/</id>
  <author>
    <name><![CDATA[张逸]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用扩展方法实现重用]]></title>
    <link href="http://agiledon.github.com/blog/2013/06/16/reuse-with-extention-method/"/>
    <updated>2013-06-16T20:06:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2013/06/16/reuse-with-extention-method</id>
    <content type="html"><![CDATA[<p>我们已经有了一个IRepository接口，它提供了诸如BatchSave()，Insert()之类的方法。其中，BatchSave()方法接收一个由实体类组成的数组，从而完成对实体对象的批量存储。
{% img center /images/2013/06/IRepository.png %}</p>

<p>对于单个实体对象而言，我们当然也需要有相关的方法来完成存储。它与BatchSave()的区别仅在于它要接收的参数只是一个实体对象。事实上，我们可以调用IRepository接口本身提供的BatchSave()来实现Save()方法。Save()方法的实现对于所有实现了IRepository接口的类而言，完全是一样的。那么，我们该如何为IRepository接口增加一个Save()方法，同时又能避免代码做出太多修改？由于接口自身并不能提供实现，因此唯一可以容纳这个方法实现的就是实现了IRepository接口的类。一个办法是为所有这些实现类定义一个公共的抽象父类，并让它再实现IRepository接口，于是将Save()的实现放到这个抽象父类中，就可以使得所有子类共享Save()方法的实现了。可是，为了这个Save()方法的实现与重用，专门引入一个抽象父类，是否值得呢？除非在现有的Repository继承体系中，已经存在了这样的抽象父类，否则该类的引入会导致整个继承体系发生较大的变化。</p>

<p>在.NET中，我们可以巧妙地借助扩展方法来完成对Save()方法的重用，同时又能保证现有的继承体系不变。方法就是为IRepository接口提供扩展方法：
{% codeblock lang:csharp %}
public static class RepositoryExtensions {</p>

<pre><code>public static void Save&lt;T&gt;(this IRepository&lt;T&gt; repository, T entity) {
    repo.BatchSave(new[] {entity});
}
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IsDefined的问题]]></title>
    <link href="http://agiledon.github.com/blog/2011/10/11/Issue-of-isdefined/"/>
    <updated>2011-10-11T17:06:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2011/10/11/Issue-of-isdefined</id>
    <content type="html"><![CDATA[<p>在.NET 4.0(当然也包括4.0以前的版本)下，用反射判断某个方法是否运用了自定义Attribute时，可以通过调用MethodInfo的IsDefined()方法进行确认。当然，IsDefined()方法事实上定义在MethodInfo的父类MemberInfo中，但它仅仅被定义为抽象方法，真正的实现是在MethodInfo的子类DynamicMethod中。调用方式如下所示：
{% codeblock lang:csharp %}
methodInfo.IsDefined(typeof(MyAttribute), false)
{% endcodeblock %}
然而，在实际开发中，我发现该方法有一个问题。如果获得MethodInfo的方式是通过加载程序集，然后利用反射方式获得的MethodInfo对象，即使该方法运用了自定义Attribute，返回的结果仍然是false。例如，我们将需要判断的方法所在的类定义到一个单独的Project中，并编译为单独的dll文件，然后，利用Assembly的LoadFile()方式获得程序集：
{% codeblock lang:csharp %}
  var assembly = Assembly.LoadFile(assemblyPath);
  var types = assembly.GetExportedTypes();
  types.ToList().ForEach(</p>

<pre><code>  type =&gt;
  {
      var flag =
          type.GetMethods().Where(methodInfo =&gt; !methodInfo.IsAbstract).Any(
              methodInfo =&gt; methodInfo.IsDefined(typeof(MyAttribute), false));
      Console.WriteLine("Flag of IsDefined is: {0}", flag);
  }
</code></pre>

<p>  );
{% endcodeblock %}</p>

<p>打印出来的值为false。</p>

<!--more-->


<p>反之，如果不是通过加载程序集，而是直接通过typeof()获得的Type，并调用其下MethodInfo.IsDefined()方法，只要该方法被运用了指定的Attribute，返回的结果则为true。</p>

<p>分析原因，大约是获得Type的方式不同所造成的。Assembly类的GetExportedType()实现如下所示：
{% codeblock lang:csharp %}
[SecuritySafeCritical]
public override Type[] GetExportedTypes()
{</p>

<pre><code>Type[] o = null;
GetExportedTypes(this.GetNativeHandle(), JitHelpers.GetObjectHandleOnStack&lt;Type[]&gt;(ref o));
return o;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>注意，这里返回的Type[]事实上是通过引用方式传递给了JitHelpers的GetObjectHandleOnStack&lt;Type[]>方法中：
{% codeblock lang:csharp %}
[TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries"), SecurityCritical]
internal static ObjectHandleOnStack GetObjectHandleOnStack<T>(ref T o) where T: class
{</p>

<pre><code>TypedReference reference = __makeref(o);
return new ObjectHandleOnStack(reference.GetPointerOnStack());
</code></pre>

<p>}
{% endcodeblock %}
这里将Type转换成了TypedReference。关键大约就是这里，可惜我无法找到typeof()的具体实现方式。代码追踪到这里，就无法判断这里发生的真实原因了。若要了解.NET底层机制的同学，可以告诉我。</p>

<p>若要解决反射方式无法通过IsDefined()判断的问题，可以调用MethodInfo的GetCustomAttribute()方法。例如：
{% codeblock lang:csharp %}
private static bool IsAppliedWith(this MethodInfo methodInfo, Type attributeType, string attributeName)
{</p>

<pre><code>return methodInfo.GetCustomAttributes(attributeType, false).ToString().Contains(attributeName);
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>无论是利用反射加载，还是使用typeof，采用这种方式判断方法是否运用了指定的Attribute，都是能够生效的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解依赖与接缝]]></title>
    <link href="http://agiledon.github.com/blog/2011/08/07/decouple-and-seam/"/>
    <updated>2011-08-07T21:58:00+08:00</updated>
    <id>http://agiledon.github.com/blog/2011/08/07/decouple-and-seam</id>
    <content type="html"><![CDATA[<p>接缝（seam）是Michael C. Feathers提出的概念。Feathers在Working Effectively with Legacy Code一书中对接缝的定义如下：接缝，顾名思义，就是指程序中的一些特殊的点，在这些点上你无需作任何修改就可以达到改动程序行为的目的。</p>

<p>“接缝”这个词语不太好理解，根据我的理解，大约还是依赖点的含义。通过事先找到依赖点，并采取一定方式解除依赖，就能够改善代码质量，尤其是针对遗留代码而言。准确而言，我们寻找接缝以及解依赖，就是为了代码能够具有好的可重用性与可扩展性，尤其是当我们能解除对其他外部服务的依赖时，可以带来程序的可测试性。</p>

<p>最近项目组的同事和我讨论了这样一个满足可测试性的问题。项目中需要对返回的响应信息PlatformResponse进行处理，这些信息会根据不同的StatusCode，得到不同的提示或出错信息。为了避免分支语句的判断，同事利用hash table将StatusCode与提示（出错）信息进行了映射，然后根据当前的StatusCode就可以返回对应的结果。返回结果后，还需要调用外部服务对消息进行处理，例如消息的输出。由于之前相关的类PlatformResponse并没有提供这一逻辑，相关服务要返回消息时，直接返回了PlatformResponse对象，然后再由客户端根据当前的StatusCode来判断，输出相关的提示信息，所以同事将这些逻辑写到了扩展方法中，例如定义PlatformResponseHelper静态类：</p>

<!--more-->


<p>{% codeblock lang:csharp %}
public static class PlatformResponseHelper {</p>

<pre><code>private static HashTable&lt;String,String&gt; messageMapping = //ignore;
public static void Output(this PlatformResponse response) {
    ServiceLocator.Lookup&lt;IMessageWriter&gt;.Write(messageMapping[response.StatusCode]);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>通过引入扩展方法，Controller得到的PlatformResponse对象就可以通过调用扩展方法Output()输出获得的提示(出错)信息。注意，在上面的代码中，ServiceLocator是一个单例的服务定位器对象，通过它可以获得注册的服务。在Controller中，同样调用了ServiceLocator来获得它所需的业务服务。</p>

<p>现在，我们需要进行单元测试。项目之前已经为ServiceLocator提供了Mock对象，并且该对象在Controller中也是通过依赖注入的方式获得的。所以，在测试Controller时，可以通过注入模拟的ServiceLocator对象进行测试，从而解除与外部服务之间的依赖关系。现在，在增加了PlatformResponse的扩展方法时，遇到了难题，即如何解除扩展方法与ServiceLocator之间的依赖关系？</p>

<p>显然，这里的ServiceLocator.Lookup<IMessageWriter>.Write()方法调用就是前面所说的“接缝”。我们希望在单元测试中不依赖于ServiceLocator，这就需要解除PlatformResponse与ServiceLocator之间的耦合关系。同事希望既能达到可测试性的目的，又要保障调用的简单。</p>

<p>在面向对象设计中，最常见的解除依赖的方法是职责分离以及抽象，或者利用反射或IOC容器来解除具体依赖。由于要解除与ServiceLocator的耦合关系，再加上调用PlatformResponse相关方法的Controller也是通过依赖注入ServiceLocator对象的，所以我首先想到将ServiceLocator转移到扩展方法的外部，通过传入参数的方式注入依赖。由于这个对象是单例的，因此Controller获得的ServiceLocator也就是PlatformResponse需要的对象。当我们调用PlatformResponse的Output()方法时，可以将Controller获得的ServiceLocator对象作为方法参数传给PlatformResponse。在Controller层，我们利用依赖注入注入Mock对象，就可以达到较好的可测试性了。</p>

<p>然而，倘若要这样做，就需要将调用代码改为：
{% codeblock lang:csharp %}
businessService.Response.Output(serviceLocator);
{% endcodeblock %}</p>

<p>同事觉得在调用Output()方法时，还需要传入ServiceLocator对象，实在不够优雅而简洁。</p>

<p>由于C#的扩展方法有很多限制，例如它要求必须是静态类和静态方法，很难利用OO的一些特性，所以我想到的第二个方案是不采用扩展方法，而是将之前的逻辑直接封装到PlatformResponse中。我们可以将Output()方法定义为虚方法，然后再为测试定义PlatformResponse的子类，它将作为测试使用的Mock类，重写Output()方法。遗憾的是，系统基本上都是在调用外部服务的时候才获得的PlatformResponse对象。我们不可能去修改服务对象，使其在单元测试时返回该类的子类对象。</p>

<p>第三条路是转移职责，将扩展方法Output()转移到一个专门的类，例如OutputMessage，由它来负责管理StatusCode与提示（出错）消息之间的映射关系，以及消息的输出，然后由子类重写消息处理的逻辑，完成模拟。例如代码：
{% codeblock lang:csharp %}
public class OutputMessage {</p>

<pre><code>private PlatformResponse response;
private HashTable&lt;String, String&gt; messageMapping = //ignore;
public OutputMessage(PlatformResponse response) {
    this.response = response;
}
public void Output() {
    OutputInternal();
}
protected virtual void OutputInternal() {
    ServiceLocator.Lookup&lt;IMessageWriter&gt;.Write(messageMapping[response.StatusCode]);
}
</code></pre>

<p>}
public class MockOutputMessage {</p>

<pre><code>public MockOutputMessage(PlatformResponse response):base(response) {}
protected override void OutputInternal() {
//mock international service to handle message;
</code></pre>

<p>   }
}
{% endcodeblock %}</p>

<p>实际上这一方案是第二种方案的一种变化。因为我们无法修改一个已经被广泛使用的类，所以只能在引入新职责的时候，通过引入新生类来完成职责的增加，并利用子类重写的方式达到可测试的目的。</p>

<p>可是这一方案实际上更无法达到同事的目标，因为改动后的调用变得比第一种方案更复杂：
<code>csharp
   new OutputMessage(businessService.Response).Output();
</code></p>

<p>我们必须考虑OutputMessage对象的创建，同事还需要将PlatformResponse对象传入，再调用它的Output()方法。虽然不需要传入方法参数，但对象的创建以及构造函数参数的传入，反而让事情变得更复杂。</p>

<p>那么，应该怎么办？同事的理想目标是调用简单。就目前而言，在C#中，只有扩展方法才能让我们对PlatformResponse对象的message处理显得如此的自然而简洁。再加上PlatformMessage对象已经被广泛使用，因此从PlatformMessage类的角度进行处理，就变得不再可能。</p>

<p>让我们再来仔细思考“接缝”的问题。是谁引入了依赖点？接缝是调用ServiceLocator这条语句，而它的目的实际上是需要获得IMessageWriter。是这个外部服务成为测试的障碍。所以解决的重点应该是解除与IMessageWriter之间的依赖。要这样做，就需要修改Output()扩展方法，使其能够传入IMessageWriter对象。这种改进事实上与第一种方案没有什么区别，唯一的不同是它依赖于更小的接口，而不是全局的ServiceLocator对象。我认为，这已经是一个最好的方案了。但是同事依旧执著于调用的简单性。他认为，不能为了单元测试，而改变客户端调用的方式。</p>

<p>现在，我们已经明白扩展方法是最简单的实现方式，纠结仅仅在于IMessageWriter服务的获取方式而已。在产品代码中，我们可以通过ServiceLocator来获得IMessageWriter对象，而在测试的时候，我们又需要模拟该服务对象。若要两全齐美，只有区分测试与生产环境。事实上，这是我最初想到的做法，就是引入预定义来区分测试与真正的生产环境。但同事无法接受这种C++所主要采取的预定义做法。因此，我唯一能想到的是修改PlatformMessage类的定义，提供设置IMessageWriter的属性（因为C#并不支持扩展属性），并在Output()方法中判断IMessageWriter对象是否为null。如果为null，则说明它没有在测试环境下注入，这就需要通过ServiceLocator获得。
{% codeblock lang:csharp %}
public class PlatformResponse {</p>

<pre><code>private IMessageWriter writer = null;
public IMessageWriter MessageWriter {
    get; set;
}
</code></pre>

<p>}
public static class PlatformResponseHelper {</p>

<pre><code>private static HashTable&lt;String,String&gt; messageMapping = //ignore;

public static void Output(this PlatformResponse response) {
    String message = messageMapping[response.StatusCode];
    //if not null，the object had been injected for testing;
   if (response.MessageWriter !=null) {
       response.MessageWriter.Write(message);
   } else {
       ServiceLocator.Lookup&lt;IMessageWriter&gt;.Write(message);
   }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>虽然我修改了PlatformResponse类的定义，但由于需要调用或创建PlatformResponse对象的外部服务并不需要新增加的MessageWriter属性，因此这样的修改实际上是扩展，并不会影响到以前的代码。这就是我唯一能够想到的满足同事要求的方案。在测试时，我们可以通过为PlatformResponse注入模拟的IMessageWriter对象，而在真正的产品代码中，则无需为它设置MessageWriter属性，而是直接调用它的扩展方法Output()。美中不足之处在于它为调用者提供了一定的开放性，使得调用者能够自由设置MessageWriter属性，破坏了对象的封装。为使这种破坏带来的影响降到最低，在单元测试放在同一个项目的前提下，可以考虑将MessageWriter属性定义为internal。</p>

<p>我们常常需要在灵活性和简单性之间进行设计权衡。大多数情况下，都可能产生非此即彼的选择。要做到两全齐美真的很难。从面向对象的角度来看，我不认为最后的方案是最佳方案。其实，通过方法参数注入IMessageWriter的做法已经足够好了，它并没有加大结构与调用的复杂性。无论怎样，设计总是见仁见智的问题，就看大家的选择了。唯一需要遵循的原则，就是设计必须结合具体的场景来做出正确的决定。</p>
]]></content>
  </entry>
  
</feed>
